generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

enum ActivityAction {
  Created    @map("created")
  Moved      @map("moved")
  Updated    @map("updated")
  Commented  @map("commented")
  Closed     @map("closed")
  Reopened   @map("reopened")
  Assigned   @map("assigned")
  Unassigned @map("unassigned")
  Labeled    @map("labeled")
  Unlabeled  @map("unlabeled")
  Attached   @map("attached")
  Detached   @map("detached")

  @@map("activity_action")
}

enum Color {
  SubtleYellow @map("subtle_yellow")
  SubtleOrange @map("subtle_orange")
  SubtleRed    @map("subtle_red")
  SubtlePurple @map("subtle_purple")
  Green        @map("green")
  Yellow       @map("yellow")
  Orange       @map("orange")
  Red          @map("red")
  Purple       @map("purple")
  BoldGreen    @map("bold_green")
  BoldYellow   @map("bold_yellow")
  BoldOrange   @map("bold_orange")
  BoldRed      @map("bold_red")
  BoldPurple   @map("bold_purple")
  SubtleBlue   @map("subtle_blue")
  SubtleSky    @map("subtle_sky")
  SubtleLime   @map("subtle_lime")
  SubtlePink   @map("subtle_pink")
  SubtleBlack  @map("subtle_black")
  Blue         @map("blue")
  Sky          @map("sky")
  Lime         @map("lime")
  Pink         @map("pink")
  Black        @map("black")
  BoldBlue     @map("bold_blue")
  BoldSky      @map("bold_sky")
  BoldLime     @map("bold_lime")
  BoldPink     @map("bold_pink")
  BoldBlack    @map("bold_black")
  Default      @map("default")

  @@map("color")
}

enum BoardBackground {
  Mountain @map("mountain")
  Valley   @map("valley")
  Tree     @map("tree")
  Snow     @map("snow")

  @@map("board_background")
}

enum BoardCreationRestrictions {
  WorkspaceMember @map("workspace_member")
  WorkspaceAdmin  @map("workspace_admin")
  Nobody          @map("nobody")

  @@map("board_creation_restrictions")
}

enum BoardRole {
  Admin    @map("admin")
  Member   @map("member")
  Observer @map("observer")

  @@map("board_role")
}

enum BoardSharing {
  Anybody             @map("anybody")
  OnlyWorkspaceMember @map("only_workspace_member")

  @@map("board_sharing")
}

enum BoardVisibility {
  Private          @map("private")
  WorkspaceMembers @map("workspace_members")
  Public           @map("public")

  @@map("board_visibility")
}

enum CommentingRestrictions {
  Disabled         @map("disabled")
  BoardMembers     @map("board_members")
  WorkspaceMembers @map("workspace_members")

  @@map("commenting_restrictions")
}

enum MemberManageRestrictions {
  Admins  @map("admins")
  Members @map("members")

  @@map("member_manage_restrictions")
}

enum MembershipRestrictions {
  Anybody        @map("anybody")
  SpecificDomain @map("specific_domain")

  @@map("membership_restrictions")
}

enum SlackSharing {
  WorkspaceMember @map("workspace_member")
  Admins          @map("admins")

  @@map("slack_sharing")
}

enum Theme {
  Light  @map("light")
  Dark   @map("dark")
  System @map("system")

  @@map("theme")
}

enum WorkspaceRole {
  Admin  @map("admin")
  Member @map("member")
  Guest  @map("guest")

  @@map("workspace_role")
}

enum WorkspaceType {
  Marketing      @map("marketing")
  SalesCrm       @map("sales_crm")
  HumenResources @map("humen_resources")
  SmallBusiness  @map("small_business")
  EngineeringIt  @map("engineering_it")
  Education      @map("education")
  Operations     @map("operations")
  Other          @map("other")

  @@map("workspace_type")
}

enum WorkspaceVisibility {
  Private @map("private")
  Public  @map("public")

  @@map("workspace_visibility")
}

// Models
model ActivityLog {

  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  boardId   String         @map("board_id") @db.Uuid
  cardId    String?        @map("card_id") @db.Uuid
  userId    String?        @map("user_id") @db.Uuid
  action    ActivityAction
  payload   Json?
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  card  Card? @relation(fields: [cardId], references: [id], onUpdate: NoAction)
  user  User? @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([boardId, createdAt(sort: Desc)], map: "activity_board_time_idx")
  @@index([cardId, createdAt(sort: Desc)], map: "activity_card_time_idx")
  @@map("activity_log")
}

model Attachment {

  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cardId    String   @map("card_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  url       String
  filename  String
  bytes     BigInt?
  meta      Json?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user User @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([cardId, createdAt(sort: Desc)], map: "attachments_card_time_idx")
  @@map("attachments")
}

model BoardMember {

  boardId  String    @map("board_id") @db.Uuid
  userId   String    @map("user_id") @db.Uuid
  role     BoardRole @default(Member)
  joinedAt DateTime  @default(now()) @map("joined_at") @db.Timestamptz(6)

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([boardId, userId])
  @@index([userId], map: "board_members_user_idx")
  @@map("board_members")
}

model Board {

  id             String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId    String                   @map("workspace_id") @db.Uuid
  name           String
  description    String?
  createdBy      String                   @map("created_by") @db.Uuid
  allowCovers    Boolean                  @default(true) @map("allow_covers")
  showComplete   Boolean                  @default(true) @map("show_complete")
  createdAt      DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime                 @default(now()) @map("updated_at") @db.Timestamptz(6)
  lastActivityAt DateTime?                @map("last_activity_at") @db.Timestamptz(6)
  background     BoardBackground
  visibility     BoardVisibility          @default(WorkspaceMembers)
  memberManage   MemberManageRestrictions @default(Members) @map("member_manage")
  commenting     CommentingRestrictions   @default(BoardMembers)

  activityLogs ActivityLog[]
  boardMembers BoardMember[]
  creator      User          @relation(fields: [createdBy], references: [id], onUpdate: NoAction)
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  labels       Label[]
  lists        List[]
  JoinRequest  JoinRequest[]

  @@index([workspaceId], map: "boards_workspace_idx")
  @@map("boards")
}

model CardAssignee {

  cardId String @map("card_id") @db.Uuid
  userId String @map("user_id") @db.Uuid

  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([cardId, userId])
  @@index([userId], map: "card_assignees_user_idx")
  @@map("card_assignees")
}

model CardLabel {

  cardId  String @map("card_id") @db.Uuid
  labelId String @map("label_id") @db.Uuid

  card  Card  @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  label Label @relation(fields: [labelId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([cardId, labelId])
  @@map("card_labels")
}

model CardWatcher {

  cardId    String   @map("card_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([cardId, userId])
  @@index([userId], map: "card_watchers_user_idx")
  @@map("card_watchers")
}

model Card {

  id            String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  listId        String?                  @map("list_id") @db.Uuid
  inboxUserId   String?                  @map("inbox_user_id") @db.Uuid
  title         String
  description   String?
  dueDate       DateTime?                @map("due_date") @db.Timestamptz(6)
  startDate     DateTime?                @map("start_date") @db.Timestamptz(6)
  position      Decimal                  @db.Decimal(16, 6)
  isArchived    Boolean                  @default(false) @map("is_archived")
  isCompleted   Boolean                  @default(false) @map("is_completed")
  createdBy     String                   @map("created_by") @db.Uuid
  coverImageUrl String?                  @map("cover_image_url")
  createdAt     DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime                 @default(now()) @map("updated_at") @db.Timestamptz(6)
  searchDoc     Unsupported("tsvector")? @map("search_doc")

  activityLogs ActivityLog[]
  attachments  Attachment[]
  assignees    CardAssignee[]
  cardLabels   CardLabel[]
  watchers     CardWatcher[]
  creator      User           @relation(fields: [createdBy], references: [id], onUpdate: NoAction)
  list         List?          @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  inbox        Inbox?         @relation(fields: [inboxUserId], references: [userId], onDelete: Cascade, onUpdate: NoAction)
  checklists   Checklist[]
  comments     Comment[]

  @@unique([listId, position], map: "cards_order_idx")
  @@index([searchDoc], map: "cards_search_gin_idx", type: Gin)
  @@map("cards")
}

model ChecklistItemAssignee {

  itemId String @map("item_id") @db.Uuid
  userId String @map("user_id") @db.Uuid

  item ChecklistItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([itemId, userId])
  @@map("checklist_item_assignees")
}

model ChecklistItem {

  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  checklistId String    @map("checklist_id") @db.Uuid
  text        String
  isCompleted Boolean   @default(false) @map("is_completed")
  dueDate     DateTime? @map("due_date") @db.Timestamptz(6)
  position    Decimal   @default(1000) @db.Decimal(16, 6)

  assignees ChecklistItemAssignee[]
  checklist Checklist               @relation(fields: [checklistId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([checklistId, position], map: "checklist_items_parent_pos_idx")
  @@map("checklist_items")
}

model Checklist {

  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cardId   String  @map("card_id") @db.Uuid
  title    String
  position Decimal @default(1000) @db.Decimal(16, 6)

  items ChecklistItem[]
  card  Card            @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([cardId, position], map: "checklists_card_pos_idx")
  @@map("checklists")
}

model Comment {

  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cardId    String   @map("card_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  text      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([cardId, createdAt(sort: Desc)], map: "comments_card_time_idx")
  @@map("comments")
}

model Inbox {

  userId    String   @id @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards Card[]

  @@map("inboxes")
}

model JoinRequest {

  userId  String @db.Uuid
  boardId String @db.Uuid

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@id([userId, boardId])
  @@map("join_requests")
}

model Label {

  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  boardId String  @map("board_id") @db.Uuid
  name    String?
  color   Color

  cardLabels CardLabel[]
  board      Board       @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([boardId, name])
  @@index([boardId], map: "labels_board_idx")
  @@map("labels")
}

model ListWatcher {

  listId    String   @map("list_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  list List @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([listId, userId])
  @@map("list_watchers")
}

model List {

  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  boardId    String  @map("board_id") @db.Uuid
  name       String
  position   Decimal @db.Decimal(16, 6)
  isArchived Boolean @default(false) @map("is_archived")
  subscribed Boolean @default(false)

  cards    Card[]
  watchers ListWatcher[]
  board    Board         @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([boardId, position], map: "lists_order_idx")
  @@map("lists")
}

model User {

  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId              String   @unique @map("clerk_id")
  email                String   @unique(map: "users_email_idx") @db.Citext
  username             String?  @unique(map: "users_username_idx") @db.Citext
  fullName             String   @map("full_name")
  avatarUrl            String   @map("avatar_url")
  theme                Theme    @default(System)
  recentlyViewedBoards String[] @default([]) @map("recently_viewed_boards")
  emailNotification    Boolean  @default(true) @map("email_notification")
  pushNotification     Boolean  @default(false) @map("push_notification")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  bio                  String?

  activityLogs           ActivityLog[]
  attachments            Attachment[]
  boardMembers           BoardMember[]
  boards                 Board[]
  cardAssignees          CardAssignee[]
  cardWatchers           CardWatcher[]
  cards                  Card[]
  checklistItemAssignees ChecklistItemAssignee[]
  comments               Comment[]
  listWatchers           ListWatcher[]
  workspaceMembers       WorkspaceMember[]
  workspaces             Workspace[]
  inbox                  Inbox?
  JoinRequest            JoinRequest[]

  @@map("users")
}

model WorkspaceMember {

  workspaceId String        @map("workspace_id") @db.Uuid
  userId      String        @map("user_id") @db.Uuid
  role        WorkspaceRole @default(Member)
  joinedAt    DateTime      @default(now()) @map("joined_at") @db.Timestamptz(6)

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([workspaceId, userId])
  @@map("workspace_members")
}

model Workspace {

  id                              String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                            String
  description                     String?
  visibility                      WorkspaceVisibility       @default(Private)
  premium                         Boolean                   @default(false)
  createdAt                       DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                       DateTime                  @default(now()) @map("updated_at") @db.Timestamptz(6)
  type                            WorkspaceType
  createdBy                       String                    @map("created_by") @db.Uuid
  workspaceMembershipRestrictions MembershipRestrictions    @default(Anybody) @map("workspace_membership_restrictions")
  publicBoardCreation             BoardCreationRestrictions @default(WorkspaceMember) @map("public_board_creation")
  workspaceBoardCreation          BoardCreationRestrictions @default(WorkspaceMember) @map("workspace_board_creation")
  privateBoardCreation            BoardCreationRestrictions @default(WorkspaceMember) @map("private_board_creation")
  publicBoardDeletion             BoardCreationRestrictions @default(WorkspaceMember) @map("public_board_deletion")
  workspaceBoardDeletion          BoardCreationRestrictions @default(WorkspaceMember) @map("workspace_board_deletion")
  privateBoardDeletion            BoardCreationRestrictions @default(WorkspaceMember) @map("private_board_deletion")
  allowGuestSharing               BoardSharing              @default(Anybody) @map("allow_guest_sharing")
  allowSlackIntegration           SlackSharing              @default(WorkspaceMember) @map("allow_slack_integration")

  boards           Board[]
  workspaceMembers WorkspaceMember[]
  creator          User              @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([visibility])
  @@map("workspaces")
}
